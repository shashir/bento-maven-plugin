/**
 * (c) Copyright 2014 WibiData, Inc.
 *
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.kiji.maven.plugins;

import java.io.File;
import java.io.IOException;

import com.google.common.base.Preconditions;
import org.apache.commons.io.FileUtils;
import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugins.annotations.LifecyclePhase;
import org.apache.maven.plugins.annotations.Mojo;
import org.apache.maven.plugins.annotations.Parameter;

/**
 * Maven goal for starting Bento cluster.
 */
@Mojo(
    name = "start",
    defaultPhase = LifecyclePhase.PRE_INTEGRATION_TEST
)
public class StartMojo extends AbstractMojo {
  /**
   * Where in the bento-cluster environment are the generated site files stored.
   * TODO: Configure the bento script to write the site files to a pre-specified location.
   */
  private static final String[] SITE_FILE_PATHS_RELATIVE_TO_BENTO_DIR = new String[] {
      "client-conf/hbase/hbase-site.xml",
      "client-conf/hadoop/core-site.xml",
      "client-conf/hadoop/mapred-site.xml",
      "client-conf/hadoop/yarn-site.xml",
  };

  /** If true, this goal should be a no-op. */
  @Parameter(property = "skip", alias = "skip", defaultValue = "false")
  private boolean mSkip;

  /** Path to bento-cluster directory containing bin/bento and related executables. */
  @Parameter(
      property = "bento.dir.path",
      alias = "bento.dir.path",
      required = true
  )
  private File mBentoDirPath;

  /**
   * The directory that will store all the configuration *-site.xml files required to connect to
   * HBase, HDFS, and the other Bento cluster components. These files will be generated by the goal.
   */
  @Parameter(
      property = "site.files.dir.path",
      alias = "site.files.dir.path",
      defaultValue="${project.build.testOutputDirectory}/",
      required = true
  )
  private File mSiteFilesOutputDirPath;

  /**
   * Generate name for Bento cluster container, by appending timestamp to "bento-".
   *
   * @return name for Bento cluster container.
   */
  private static String generateBentoName() {
    return String.format("bento-%d", System.currentTimeMillis());
  }

  /**
   * Starts the Bento cluster container in a new thread.
   *
   * <p>This method is called by the maven plugin framework to run the goal.</p>
   *
   * @throws MojoExecutionException If there is a fatal error during this goal's execution.
   */
  public void execute() throws MojoExecutionException {
    if (mSkip) {
      getLog().info("Not starting a Bento cluster because skip=true.");
      return;
    }

    // Start the cluster.
    try {
      BentoClusterSingleton.INSTANCE.startAndWaitUntilReady(
          getLog(),
          mBentoDirPath,
          generateBentoName()
      );
    } catch (IOException e) {
      throw new MojoExecutionException("Unable to start Bento cluster.", e);
    }

    for (String siteFilePathRelativeToBento : SITE_FILE_PATHS_RELATIVE_TO_BENTO_DIR) {
      copySiteFile(siteFilePathRelativeToBento);
    }
  }

  /**
   * Copy a site file generated by the bento script to the location specified by the plugin
   * specification.
   *
   * @param siteFilePathRelativeToBento the relative path to the site file within the bento package.
   * @throws MojoExecutionException if copying the site file or writing to the index file fails.
   */
  private void copySiteFile(String siteFilePathRelativeToBento) throws MojoExecutionException {
    File generatedSiteFile = new File(mBentoDirPath, siteFilePathRelativeToBento);
    try {
      FileUtils.copyFileToDirectory(generatedSiteFile, mSiteFilesOutputDirPath);
    } catch (IOException ioe) {
      throw new MojoExecutionException(String.format(
          "Copying site file %s to location %s failed.",
          generatedSiteFile.getAbsolutePath(),
          mSiteFilesOutputDirPath.getAbsolutePath()
      ), ioe);
    }
    File writtenFile = new File(mSiteFilesOutputDirPath, generatedSiteFile.getName());
    Preconditions.checkArgument(writtenFile.exists());
    getLog().info("Wrote " + writtenFile.getAbsolutePath() + ".");
    File confIndexFile = new File(mSiteFilesOutputDirPath, "conf-index.conf");
    try {
      FileUtils.write(confIndexFile, writtenFile.getAbsolutePath() + "\n", true);
    } catch (IOException ioe) {
      throw new MojoExecutionException(String.format(
          "Unable to write to configuration index file: %s",
          writtenFile.getAbsolutePath()
      ), ioe);
    }
  }
}
